							"Многопоточность."
Многопоточность это способ создать параллельную обработку.Благодаря потокам мы можем построить многозадачные приложения.
Поток (thread) представляет собой последовательность инструкций в программе. 
Один поток ожидает ввода данных пользователем, а другой в это время выполняет в фоновом режиме некоторый анализ. 
Третий поток может сохранять записываемые данные во временный файл, а четвертый — загружать дополнительные данные из Интернета.
Каждый процесс состоит из ресурсов.

                                               				"Асинхронное программирование."
У любого потока имеется счетчик команд, указывающий на место в программе, где происходит обработка в котором сохраняются локальные переменные потока.
Асинхронное программирование
Цель ассинхронного програмирования заключается в том чтобы сделать код возможным для чтения последовательность.
если функция зависит от результата выполнения другой функции, то она должна дождаться пока нужная ей функция не завершит свою работу и не вернет результат до тех пор,
пока это не произойдет, выполнение программы, по сути, будет остановлено с точки зрения пользователя.
В качестве возвращаемого типа используется один из следующих методов:

void
Task
Task<T>
ValueTask<T>

                                              				 "Паралельное программирование"
Паралельное программирование это техника в программирования который использует преимущества многопроцессорных компьютеров и в котором будет работать.
в паралеьное программирование входят Tasks, parallel и TPL.
В основе TPL лежит концепция задач, каждая из которых описывает отдельную прдолжительную операцию.
TPL представлен специальным классом Task, который находится в пространстве имен System.Threading.Tasks.
Этот класс описывает отдельную задачу, которая запускается асинхронно.Для 
увеличения скорости работы паралельного программирования надо по новому подходить к организации кода.

